<h1>Plugins: fleegix.date.Date</h1>

<hr/>

<p>
  A timezone-enabled, drop-in replacement for the
  stock JavaScript Date. The fleegix.date.Date object is
  API-compatible with JS Date, with the same getter and setter
  methods -- it should work fine in any code that works with
  normal JavaScript Dates.
</p>

<p>
  <a href="<%= FLEEGIX_REPO %>/plugins/date/date.js?raw=true">Download
  fleegix.date.Date and fleegix.date.timezone (21KB)</a>
</p>

<h2>Overview</h2>

<p>
  The fleegix.date.Date object gives you full-blown
  timezone support, independent from the timezone set on
  the end-user's machine running the browser. It uses the
  <a href="http://en.wikipedia.org/wiki/Zoneinfo">Olson
  zoneinfo</a> files for its timezone data.
</p>

<p>
  The constructor function and setter methods use proxy
  JavaScript Date objects behind the scenes, so you can use
  strings like '10/22/2006' with the constructor.  You also get
  the same sensible wraparound behavior with numeric parameters
  (like setting a value of 14 for the month wraps around to
  the next March).
</p>

<p>
  The other significant departure from the built-in JavaScript
  Date is that fleegix.date.Date also has named properties
  that store the values of year, month, date, etc., so it can
  be directly serialized to JSON and used for data transfer.
</p>

<h2>Setup</h2>

<p>
  First you'll need to include the code on your page. Both
  fleegix.date.Date, and the supporting code it needs in
  fleegix.date.timezone are bundled in the Date.js file in the
  Fleegix.js plugins directory. Include the code on your page
  with a normal JavaScript script include, like so:
</p>

<pre><code>&lt;script type="text/javascript"
  src="/js/lib/fleegix_js/plugins/date/date.js"&gt;</script></code></pre>

<p>
  Next you'll need the <a
  href="http://www.twinsun.com/tz/tz-link.htm">Olson time
  zone files</a> -- fleegix.date.Date uses the raw Olson data
  to calculate timezone offsets. The Olson region files are
  simple, structured text data, which download quickly and
  parse easily. (They also compress to a very small size.)
</p>

<p>
  Then you'll need to make the files available to the
  fleegix.date.timzeone code, and initialize the code to parse
  your default region. (This will be North America if you don't
  change it). No sense in downloading and parsing timezone
  data for the entire world if you're not going to be using it.
</p>

<p>
  Put your directory of Olson files somewhere
  under your Web server root, and point
  <code>fleegix.date.timezone.zoneFileBasePath</code> to
  it. Then call the <code>init</code> function. Your code will
  look something like this:
</p>

<pre><code>fleegix.date.timezone.zoneFileBasePath = '/tz';
fleegix.date.timezone.init();</code></pre>

<p>
  If you use fleegix.date.Date with Fleegix.js, there's
  nothing else you need to do -- timezones for North America
  will be loaded and parsed on initial page load, and others
  will be downloaded and parsed on-the-fly, as needed. If
  you want to use this plugin with some other JavaScript
  toolkit, you'll need to define your own transport method
  in the <code>loadZoneFile</code> method.
</p>

<h2>Usage</h2>

<p>
  Create a fleegix.date.Date the same way as a normal JavaScript
  Date, but append a timezone parameter on the end:
</p>

<pre><code>var dt = new fleegix.date.Date('10/31/2008',
  'America/New_York');
var dt = new fleegix.date.Date(2008, 9, 31, 11, 45,
  'America/Los_Angeles');</code></pre>

<p>
  Naturally enough, the <code>getTimezoneOffset</code> method
  returns the timezone offset in minutes based on the timezone
  you set for the date.
</p>

<pre><code>// Pre-DST-leap
var dt = new fleegix.date.Date(2006, 9, 29, 1, 59,
  'America/Los_Angeles');
dt.getTimezoneOffset(); => 420
// Post-DST-leap
var dt = new fleegix.date.Date(2006, 9, 29, 2, 0,
  'America/Los_Angeles');
dt.getTimezoneOffset(); => 480</code></pre>

<p>
  Just as you'd expect, the <code>getTime</code> method gives
  you the UTC timestamp for the given date:
</p>

<pre><code>var dtA = new fleegix.date.Date(2007, 9, 31, 10, 30,
  'America/Los_Angeles');
var dtB = new fleegix.date.Date(2007, 9, 31, 12, 30,
  'America/Chicago');
// Same timestamp
dtA.getTime(); => 1193855400000
dtB.getTime(); => 1193855400000</code></pre>

<p>
  You can set (or reset) the timezone using the
  <code>setTimezone</code> method:
</p>

<pre><code>var dt = new fleegix.date.Date('10/31/2006',
  'America/Juneau');
dt.getTimezoneOffset(); => 540
dt.setTimezone('America/Chicago');
dt.getTimezoneOffset(); => 300
dt.setTimezone('Pacific/Honolulu');
dt.getTimezoneOffset(); => 600</code></pre>

<p>
  The <code>getTimezone</code> method tells you what timezone
  a fleegix.date.Date is set to.
</p>

<pre><code>var dt = new fleegix.date.Date('12/27/2010',
  'Asia/Tokyo');
dt.getTimezone(); => 'Asia/Tokyo'</code></pre>

<h2>Customizing</h2>

<p>
  If you don't change it, the timezone region that
  loads on initialization is North America (the Olson
  'northamerica' file). To change that to another reqion,
  set <code>fleegix.date.timezone.defaultZoneFile</code>
  to your desired region, like so:
</p>

<pre><code>fleegix.date.timezone.zoneFileBasePath = '/tz';
fleegix.date.timezone.defaultZoneFile = 'asia';
fleegix.date.timezone.init();</code></pre>

<p>
  If you want to preload multiple regions, set it to an array,
  like this:
</p>

<pre><code>fleegix.date.timezone.zoneFileBasePath = '/tz';
fleegix.date.timezone.defaultZoneFile = ['asia', 
  'backward', 'northamerica', 'southamerica'];
fleegix.date.timezone.init();</code></pre>

<p>
  By default the fleegix.date.Date timezone code lazy-loads the
  timezone data files, pulling them down and parsing them only
  as needed.
</p>

<p>
  For example, if you go with the out-of-the-box setup, you'll
  have all the North American timezones pre-loaded -- but if
  you were to add a date with a timezone of 'Asia/Seoul,'
  it would grab the 'asia' Olson file and parse it before
  calculating the timezone offset for that date.
</p>

<p>
  You can change this behavior by changing the value of
  <code>fleegix.date.timezone.loadingScheme</code>. The three
  possible values are:
</p>

<ol>
  <li>
    <code>fleegix.date.timezone.loadingSchemes.PRELOAD_ALL</code>
    -- this will preload all the timezone data files for all
    reqions up front. This setting would only make sense if you
    know your users will be using timezones from all around
    the world, and you prefer taking the up-front load time
    to the small on-the-fly lag from lazy loading.
  </li>

  <li>
    <code>fleegix.date.timezone.loadingSchemes.LAZY_LOAD</code>
    -- the default.  Loads some amount of data up front,
    then lazy-loads any other needed timezone data as needed.
  </li>

  <li>
    <code>fleegix.date.timezone.loadingSchemes.MANUAL_LOAD</code>
    -- Preloads no data, and does no lazy loading. Use this
    setting if you're loading pre-parsed JSON timezone data.
  </li>
</ol>

<h2>Pre-Parsed JSON Data</h2>

<p>
  If you know beforehand what specific cities your users are
  going to be using, you can reduce load times specifically
  by creating a pre-parsed JSON data file containing only the
  timezone info for those specific cities.
</p>

<p>
  The date plugin folder contains a <a
  href="http://svn.fleegix.org/fleegix_js/trunk/plugins/date/preparse.js">command-line
  JavaScript script</a> that can generate this kind
  of JSON data. Note that this script requires the <a
  href="http://www.mozilla.org/rhino/">Rhino</a> (Java)
  JavaScript engine to run, since the stock SpiderMonkey (C)
  engine doesn't come with file I/O capabilities.
</p>

<p>
  Use the script like this:
</p>

<pre><code>rhino preparse.js zoneFileDirectory [exemplarCities] \
> outputfile.json</pre></code>

<p>
  The first parameter is the directory where the script can
  find the Olson zoneinfo files. The second (optional) param
  should be a comma-delimited list of timzeone cities to create
  the JSON data for. If that parameter isn't passed, the script
  will generate the JSON data for all the files.
</p>

<pre><code>rhino preparse.js olson_files \
"Asia/Tokyo, America/New_York, Europe/London" \
> major_cities.json

rhino preparse.js olson_files > all_cities.json</pre></code>

<p>
  Once you have your file of
  JSON data, set your loading scheme to
  <code>fleegix.date.timezone.loadingSchemes.MANUAL_LOAD</code>,
  and load the JSON data with <code>loadZoneJSONData</code>,
  like this:
</p>

<pre><code>var _tz = fleegix.date.timezone;
_tz.loadingScheme = _tz.loadingSchemes.MANUAL_LOAD;
_tz.loadZoneJSONData('/major_cities.json', true);</pre></code>

<p>
  Since the limited set of data will be much smaller than
  any of the zoneinfo files, and the JSON data is deserialized 
  with <code>eval</code>, this method is significantly faster
  than the default setup. However, it only works if you know
  beforehand exactly what timezones you want to use.
</p>


<h2>Compressing</h2>

<p>
  The Olson timezone data files are simple, space- and
  linefeed-delimited data. The abundance of whitespace means
  they compress very, very well.
</p>

<p>
  If you plan to use fleegix.date.Date in a production Web app,
  it's highly recommended that you first strip the copious
  comments found in every Olson file, and serve compressed
  versions of the files to all browsers that can handle
  it. (Note that IE6 reports itself as able to work with
  gzipped data, but has numerous problems with it.)
</p>

<p>
  Just to give you an idea of the difference -- merely stripping
  out the comments from the 'northamerica' file reduces its
  size by two-thirds -- from 103K to 32K. Gzipping the stripped
  file reduces it down to 6.5K -- probably smaller than most
  of the graphics in your app.
</p>

<p>
  The date plugins directory has a <a href="<%= FLEEGIX_REPO
  %>/plugins/date/strip_olson_comments.rb">sample Ruby
  script</a> that you can use to strip comments from Olson
  data files.
</p>

