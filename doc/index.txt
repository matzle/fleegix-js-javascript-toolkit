Cookies

fleegix.cookie.destroy

* Syntax

fleegix.cookie.destroy(cookieName, [path]);

* Parameters

cookieName (String) -- Name of the cookie you want to remove.

path (String) -- Path for the cookie you want to remove. If 
omitted, assumes root ('/').

* Description

Removes the cookie with the specified name and path. 

* Examples

fleegix.cookie.remove('loginId');

fleegix.cookie.get

* Syntax

fleegix.cookie.get(cookieName, [path]);

* Parameters

cookieName (String) -- Name of the cookie you want to get the
value for.

path (String) -- Path for the cookie you want to get the value
for. If omitted, assumes root ('/').

* Description

Gets the value of the cookie with the specified name and path. 

* Examples

fleegix.cookie.get('loginId');

fleegix.cookie.set

* Syntax

fleegix.cookie.set(cookieName, [path]);
fleegix.cookie.set(cookieName, [opts]);

* Parameters

cookieName (String) -- Name of the cookie you want to set the
value for.

path (String) -- Path for the cookie you want to set the value
for. If omitted, assumes root ('/').

opts (Object) -- Object with keyword options for the cookie.
Here is the list of possible properties to set, and the default
values if they are not set:
  * path: '/' -- Path for Web documents that can see this cookie
  * days: (none) -- The number of days the cookie will last
  * hours: (none) -- The number of hours the cookie will last
  * minutes (none) -- The number of minutes the cookie will last

* Description

Sets the value of the cookie with the specified name and path. Days, 
hours, and minutes for the duration of the cookie may be used in
combination.

* Examples

fleegix.cookie.set('loginId');

fleegix.cookie.set('Zardoz', { path: '/app/main', hours: 2, 
  minutes: 30 });

Events

(Not done yet)
fleegix.event.listen
fleegix.event.publish
fleegix.event.unlisten
fleegix.event.unpublish

Forms

(Not done yet)
fleegix.form.diff
fleegix.form.restore
fleegix.form.serialize
fleegix.form.toHash

JSON

(Not done yet)
fleegix.json.serialize

Popup window module

(Not done yet)
fleegix.popup.close
fleegix.popup.goURLMainWin
fleegix.popup.open

UI

(Not done yet)
fleegix.ui.getWindowHeight
fleegix.ui.getWindowWidth

URI

(Not done yet)
fleegix.uri.getParam
fleegix.uri.setParam

XHR

Has two convenient methods for doing the standard GET and POST
requests, as well as the ability to do requests with more
detailed control (such as using arbitrary HTTP methods such
as PUT, setting authentication headers, or the format of the
response). Implements XHR-object pooling and request queueing.

fleegix.xhr.doGet

* Syntax

fleegix.xhr.doGet(handlerFunction, url, [responseFormat]); (async)
fleegix.xhr.doGet(url, [responseFormat]); (sync)

* Parameters

handlerFunction (Function) -- function called when an
asynchronous XHR request returns. If first argument
is missing, doGet assumes a synchronous (blocking) request.
When called by the response, it will be passed two parameters
-- the response in the desired format, and the request ID.

url (String) -- The URL to make the request to.

responseFormat (String) -- Optional parameter, sets the format
of the response passed to the handler function.  Possible values
are 'text' (to pass the responseText of the XHR object), 'xml'
(the responseXML), and 'object' (to get the XHR object itself)
Defaults to 'text.'

* Description

Makes an XHR GET request, and passes the result to the specified
handler function.

* Examples

function alertResponse(resp, id) {
  alert(resp);
  alert('Request ID was: ' + id);
}
fleegix.xhr.doGet(alertResponse, 'random_textfile.txt');

var s = fleegix.xhr.doGet('random_textfile.txt');
alert(s);

function alertStatus(resp, id) {
  alert(resp.status);
}
fleegix.xhr.doGet(alertResponse, 'random_textfile.txt', 'object');

fleegix.xhr.doPost

* Syntax

fleegix.xhr.doPost(handlerFunction, url, dataPayload, [responseFormat]); (async)
fleegix.xhr.doPost(url, dataPayload, [responseFormat]); (sync)

* Parameters

handlerFunction (Function) -- function called when an
asynchronous XHR request returns. If first argument
is missing, doPost assumes a synchronous (blocking) request.
When called by the response, it will be passed two parameters
-- the response in the desired format, and the request ID.

url (String) -- The URL to make the request to.

dataPayload (String) -- Data payload to send with the request.

responseFormat (String) -- Optional parameter, sets the format
of the response passed to the handler function.  Possible values
are 'text' (to pass the responseText of the XHR object), 'xml'
(the responseXML), and 'object' (to get the XHR object itself)
Defaults to 'text.'

* Description

Makes an XHR POST request, and passes the result to the specified
handler function.

* Examples

function alertResponse(resp, id) {
  alert(resp);
}
fleegix.xhr.doPost(alertResponse, 'random_textfile.txt',
  'foo=bar&baz=2112');

var s = fleegix.xhr.doPost('random_textfile.txt', 
  'foo=bar&baz=2112');
alert(s);

function alertStatus(resp, id) {
  alert(resp.status);
  alert('Request ID was: ' + id);
}
fleegix.xhr.doGet(alertResponse, 'random_textfile.txt', 
  'foo=bar&baz=2112', 'object');

fleegix.xhr.doReq

* Syntax

fleegix.xhr.doReq(requestOptions); (async)

* Parameters

requestOptions (Object) -- Options for the XHR request. Here
is the list of possible properties to set, and the default
values if they are not set:

  * url: null -- The URL to make the request to
  * method: 'GET' -- HTTP request method to use
  * async: true -- If set to false, makes a blocking
    request and returns the result inline
  * dataPayload: null -- data to send with POST or
    PUT requests
  * handleSuccess: null -- Function to handle successful 
    responses for asynchronous requests
  * handleErr: null -- Function to handle error 
    responses for asynchronous requests. If no error/all
    handler exists, the error will be handled with the
    built-in function fleegix.xhr.handleErrDefault, which
    pops up the error page from the server in a new,
    full-sized window
  * handleAll: null -- Function to handle both errors
    or successful responses. If you set this, don't set
    handleSuccess or handleErr
  * responseFormat: 'text' -- format to use when passing
    the response to the handler function (valid values
    are 'text,' 'xml,' 'object')
  * mimeType: null -- Can be used to override the MIME
    type of the response returned by the server. Sometimes
    used to ensure tje browser handles response as XML, 
    even if the server doesn't set the Content-type header
    properly
  * username: '' -- Set when using basic auth with the
    request
  * password: '' -- Set when using basic auth with the
    request
  * headers: [] -- Used to set arbitrary headers for
    the request
  * preventCache: false -- Adds a dummy variable to the
    end of the request URL to prevent caching in
    retarded browsers like IE6
  * uber: false -- Give the request priority over any
    existing queued requests. If uber property is set
    to true, this request goes directly to the front 
    of the queue

* Description

Makes an XHR request, and passes the result to the specified
handler function (async) or returns the result inline (sync).

* Examples

fleegix.xhr.doReq({
  url: 'some_page.rbx',
  handleAll: function (s) { alert(s.status); },
  responseFormat: 'object',
  uber: true
} );

fleegix.xhr.abort

* Syntax

fleegix.xhr.abort(requestId);

* Parameters

requestId (Number) -- Request ID of a currently processing
XHR request to abort.

* Description

If the request is still processing, will abort it and return
true. If the request identified by requestId is not currently
processing (i.e., it may have already completed), returns false.

* Examples

var id = fleegix.doGet(handlerFunction, 
  '/some_file.rbx'); // Get a request ID number
fleegix.xhr.abort(id); // Abort the request

XML

fleegix.xml.parse

* Syntax

fleegix.xml.parse(xml);

* Parameters

xml (XMLDocument) -- DOM-compatible Document object.

* Description

Parses a list of XML tags into an equivalent array of JavaScript
objects. Tag names are converted to property names, and tag
values are converted to property values (all Strings).

* Examples

function handleUserList(xml) {
  var users = fleegix.xml.parse(xml);
  var userCount = users.length;
  var firstUserUsername = users[0].username;
}

fleegix.xhr.doGet(handleUserList, 'user_list.rbx', 'xml');


